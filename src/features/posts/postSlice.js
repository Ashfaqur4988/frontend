import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchAllPosts } from "./postAPI";

const initialState = {
  posts: [],
  status: "idle",
};

export const fetchAllPostsAsync = createAsyncThunk(
  "posts/fetchPost",
  async () => {
    const response = await fetchAllPosts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const postSlice = createSlice({
  name: "posts",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllPostsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllPostsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.posts = action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount } = postSlice.actions;

export const selectPost = (state) => state.post.posts;

export default postSlice.reducer;
