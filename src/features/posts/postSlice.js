import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  createNewStatus,
  deletePost,
  fetchAllPosts,
  fetchPostById,
  fetchPostsByUserId,
  updatePost,
} from "./postAPI";

const initialState = {
  posts: [],
  status: "idle",
  selectedPost: null,
  postsByUserId: null,
};

export const fetchAllPostsAsync = createAsyncThunk(
  "posts/fetchPost",
  async () => {
    const response = await fetchAllPosts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchPostByIdAsync = createAsyncThunk(
  "posts/fetchPostById",
  async (id) => {
    const response = await fetchPostById(id);
    return response.data;
  }
);

export const createNewStatusAsync = createAsyncThunk(
  "posts/createNewStatus",
  async (post) => {
    const response = await createNewStatus(post);
    return response.data;
  }
);

//delete post
export const deletePostAsync = createAsyncThunk(
  "posts/deletePost",
  async (itemId) => {
    const response = await deletePost(itemId);
    return response.data;
  }
);

//update post post
export const updatePostAsync = createAsyncThunk(
  "posts/updatePost",
  async (newUpdatedPost) => {
    const response = await updatePost(newUpdatedPost);
    return response.data;
  }
);

export const fetchPostsByUserIdAsync = createAsyncThunk(
  "posts/fetchPostsByUserId",
  async (userId) => {
    const response = await fetchPostsByUserId(userId);
    return response.data;
  }
);

export const postSlice = createSlice({
  name: "posts",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllPostsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllPostsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.posts = action.payload;
      })
      .addCase(fetchPostByIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPostByIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.selectedPost = action.payload;
      })
      .addCase(createNewStatusAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createNewStatusAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.posts.push(action.payload);
      })
      .addCase(deletePostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deletePostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.posts.findIndex(
          (post) => post.id === action.payload
        );
        state.posts.splice(index, 1);
      })
      .addCase(updatePostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updatePostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.posts.findIndex(
          (post) => post.id === action.payload
        );
        state.posts.splice(index, 1, action.payload);
      })
      .addCase(fetchPostsByUserIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPostsByUserIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.postsByUserId = action.payload;
      });
  },
});

export const {} = postSlice.actions;

export const selectPost = (state) => state.post.posts;
export const selectPostById = (state) => state.post.selectedPost;
export const selectPostsByUserId = (state) => state.post.postsByUserId;

export default postSlice.reducer;
